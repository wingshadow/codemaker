package ${serviceAbsPackageName};

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.github.pagehelper.PageInfo;
import com.github.pagehelper.page.PageMethod;
import com.hyou.api.base.BaseService;
import ${daoPackageName}.${daoClassName};
import ${beanPackageName}.${beanClass};
import ${serviceItfcPckageName}.${serviceInterfaceName};

/**
 * <pre>
 * ${serviceClassName} Service接口抽象实现类，封装基本的通用操作。
 * 后续如果业务实现类中有通用的操作方法也可以考虑提取到该类中。
 * </pre>
 *
 * @author ${author}
 * @version ${version} $createDate 初始创建
 */
public abstract class ${serviceClassName} extends BaseService implements ${serviceInterfaceName} {
    
    private static final Logger log = LoggerFactory.getLogger(${serviceClassName}.class);
    
    @Override
    public Long insert(${beanClass} paramBean) {
        Long newId = getNextId();
        paramBean.setId(newId);
        getMapper(${daoClassName}.class).insert(paramBean);
        return newId;
    }
    
    @Override
    public void deleteByPrimaryKey(Long id) {
        getMapper(${daoClassName}.class).deleteByPrimaryKey(id);
    }
    
    @Override
    public void updateByPrimaryKeySelective(${beanClass} paramBean) {
        getMapper(${daoClassName}.class).updateByPrimaryKeySelective(paramBean);
    }
    
    @Override
    public ${beanClass} getByPrimaryKey(Long id) {
        return getMapper(${daoClassName}.class).selectByPrimaryKey(id);
    }
    
    @Override
    public List<${beanClass}> listByConditions(${beanClass} paramBean) {
        return getMapper(${daoClassName}.class).selectByConditions(paramBean);
    }
    
    @Override
    public PageInfo<${beanClass}> listByPage(${beanClass} paramBean, final int pageNum, final int pageSize) {
        PageMethod.startPage(pageNum, pageSize);
        List<${beanClass}> lst = getMapper(${daoClassName}.class).selectByConditions(paramBean);
        return new PageInfo<>(lst);
    }
    
}
