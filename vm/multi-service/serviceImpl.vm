ackage ${servicePackageName};

import java.util.ArrayList;
import java.util.List;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import lombok.extern.slf4j.Slf4j;

import com.github.pagehelper.PageInfo;
import com.github.pagehelper.page.PageMethod;
import ${basePackage}.common.base.BaseService;
import ${serviceItfcPckageName}.${serviceInterfaceName};
import ${beanPackageName}.${beanClass};
import ${basePackage}.common.AbstractBaseServiceImpl;

import org.springframework.stereotype.Service;
/**
 * ${serviceClassName} Service接口实现类
 *
 * @author ${author}
 * @version ${version} $createDate 初始创建
 */

@Slf4j
@Service
public class ${serviceClassName} extends AbstractBaseServiceImpl implements ${serviceInterfaceName} {

    private static final String MAPPER_ADDRES =
            ${beanClass}.class.getName() + "Mapper.";

    @Override
    public Long insert(${beanClass} paramBean) {
        Long newId = getNextId();
        paramBean.setId(newId);
        getMasterSession().insert(paramBean);
        return newId;
    }
    
    @Override
    public void insertBatch(List<${beanClass}> paramBeans) {
        for (${beanClass} item : paramBeans) {
            Long newId = getNextId();
            item.setId(newId);
        }

        getMasterSession().insertBatch(paramBeans);
    }
    
    @Override
    public void deleteByPrimaryKey(Long id) {
        getMasterSession().deleteByPrimaryKey(id);
    }
    
    @Override
    public void deleteBatchByPrimaryKeys(String ids) {
        String[] idArray = StringUtils.split(ids, ',');
        List<Long> idLst = new ArrayList<>();
        for (String item : idArray) {
            idLst.add(Long.valueOf(item));
        }
        
        deleteBatchByPrimaryKeys(idLst);
    }
    
    @Override
    public void deleteBatchByPrimaryKeys(List<Long> ids) {
        getMasterSession().deleteBatchByPrimaryKeys(ids);
    }
    
    @Override
    public void updateByPrimaryKeySelective(${beanClass} paramBean) {
        getMasterSession().updateByPrimaryKeySelective(paramBean);
    }
    
    @Override
    public ${beanClass} getByPrimaryKey(Long id) {
        return getMasterSession().selectByPrimaryKey(id);
    }
    
    @Override
    public List<${beanClass}> listByConditions(${beanClass} paramBean) {
        return getMasterSession().selectByConditions(paramBean);
    }
    
    @Override
    public PageInfo<${beanClass}> listByPage(${beanClass} paramBean, final int pageNum, final int pageSize) {
        PageMethod.startPage(pageNum, pageSize);
        List<${beanClass}> lst = getMasterSession().selectByConditions(paramBean);
        return new PageInfo<>(lst);
    }
    
}
